% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R
\name{predict.model_list}
\alias{predict.model_list}
\title{Make predictions using the best-performing model from tuning}
\usage{
\method{predict}{model_list}(object, newdata, prepdata, ...)
}
\arguments{
\item{object}{model_list object, as from `tune_models`}

\item{newdata}{data on which to make predictions. If missing, predictions
will be made on the training data. Should have the same structure as the
input to `prep_data`,`tune_models` or `train_models`. `predict` will try to
figure out if the data need to be sent through `prep_data` before making
predictions; this can be overriden by setting `prepdata = FALSE``, but this
should rarely be needed.}

\item{prepdata}{Logical, rarely needs to be set by the user. By default, if
`newdata` hasn't been prepped, it will be prepped by `prep_data` before
predictions are made. Set this to TRUE to force already-prepped data
through `prep_data` again, or set to FALSE to prevent `newdata` from being
sent through `prep_data`.}

\item{...}{Unused.}
}
\value{
A tibble data frame: newdata with an additional column for the
  predictions in "predicted_TARGET" where TARGET is the name of the variable
  being predicted. If classification, the new column will contain predicted
  probabilities. The tibble will have child class "hcai_predicted_df" and
  attribute "model_info" that contains information about the model used to
  make predictions.
}
\description{
Make predictions using the best-performing model from tuning
}
\details{
The model and hyperparameter values with the best out-of-fold
  performance in model training according to the selected metric is used to
  make predictions. Prepping data inside `predict` has the advantage of
  returning your predictions with the newdata in its original format.
}
\examples{
# Tune models using only the first 50 rows to keep computation fast
models <- machine_learn(pima_diabetes[1:50, ], diabetes)
# Make prediction on the next 20 rows. This uses the best-performing model from
# tuning cross validation, and it also prepares the new data in the same way as
# the training data was prepared.
predictions <- predict(models, newdata = pima_diabetes[51:70, ])
predictions
ggplot(predictions, aes(x = predicted_diabetes, fill = diabetes)) +
  geom_density(alpha = .5)
}
\seealso{
\code{\link{tune_models}}, \code{\link{prep_data}}
}
